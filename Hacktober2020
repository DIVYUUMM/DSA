
public static  void main
public static void match(String txt , String pat){
    int m = pat.length();
    int n = txt.length();


    int [] lps = new int[m];
    int j =0;

    computeLPSArray(pat,m,lps);

    int i=0;
    while(i<n){
        if(pat.charAt(j) == txt.charAt(i)){
            i++;j++;
        }

        if( j == m){
            System.out.println("Found index at " + (i-j));
            j = lps[j-1];
        }
        else if(i<n && pat.charAt(j)!=txt.charAt(i)){
            if(j!=0) j = lps[j-1];
            else i = i +1;
        }
    }
    

patch-1
 hbcdjc
 
 
  public static void bellmanFordAlgo_02(int[][] edges,int N,int src){
        int[] dis = new int[N];
        Arrays.fill(dis,(int)1e8);
        dis[src] = 0;
        boolean negativeCycle = false;

        for(int i=1;i <= N;i++){
            boolean isAnyUpdate = false;
            
            for(int[] e : edges){
                if(dis[e[0]]!= (int)1e8 && dis[e[0]] + e[2] < dis[e[1]]){
                   dis[e[1]] = dis[e[0]] + e[2];
                   isAnyUpdate = true;
                }
            }


            if(isAnyUpdate && i == N) negativeCycle = true;
            if(!isAnyUpdate && i < N) break;
        }
    }


    public class dijkstraPair{
        int vtx = 0;
        int par = 0;
        int wsf = 0;

        dijkstraPair(int vtx,int par,int wsf){
            this.vtx = vtx;
            this.par = par;
            this.wsf = wsf;
        }
    }
